openapi: 3.0.2
info:
  title: OPENAPI-SAMPLE-STRUCTURE-PERSON-DETAILS
  description: Example OpenAPI document for Person Details
  contact:
    name: WebFlux Sample
    email: webflux.sample@email.com
  version: 1.0.0
servers:
  - url: https://api-dev.webflux.sample/webflux-sample/v1
    description: DEVELOPMENT
  - url: https://api-qa.webflux.sample/webflux-sample/v1
    description: QA
  - url: https://api-homolog.webflux.sample/webflux-sample/v1
    description: HOMOLOG
  - url: https://api.webflux.sample/webflux-sample/v1
    description: PRODUCTION

tags:
  - name: Addresses
  - name: Phones

paths:
  /addresses/{personId}:
    post:
      tags:
        - Addresses
      summary: Create a new address for one person
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        This endpoint has the function of registering a new **address** for the user.
        Create address.

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
        * `AUTH-BASIC` roles

      operationId: createAddress
      parameters:
        - in: path
          name: personId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      requestBody:
        required: true
        description: "Address information"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressRequestBody"
      responses:
        201:
          $ref: "#/components/responses/AddressCreatedResponse"
    get:
      tags:
        - Addresses
      summary: Find addresses
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        This endpoint has the function of finding address.

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
        * `AUTH-BASIC` role

      operationId: findAddresses
      parameters:
        - in: path
          name: personId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/AddressReadResponse'
  /phones/{personId}:
    post:
      tags:
        - Phone
      summary: Create a new phone to the person
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Create phone

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
        * `AUTH-BASIC` role

      operationId: createPhone
      parameters:
        - in: path
          name: personId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      requestBody:
        required: true
        description: "Phone information"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhoneRequestBody"
      responses:
        201:
          $ref: "#/components/responses/PhoneCreatedResponse"
    get:
      tags:
        - Phones
      summary: Find Phones
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        This endpoint has the function of finding phones.

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
        * `AUTH-BASIC` role

      operationId: findPhones
      parameters:
        - in: path
          name: personId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/PhoneReadResponse'

components:
  securitySchemes:
    OauthSecurityUser:
      type: oauth2
      flows:
        password:
          tokenUrl: https://api-dev.webflux.sample/security/v1/oauth2/login
          scopes:
            read: User read scope
            write: User write scope
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
#  parameters:
#    QueryLimit:
#      name: limit
#      in: query
#      schema:
#        type: integer
#        default: 20
#      description: Total count of registries to fetch.
#    QueryOffset:
#      name: offset
#      in: query
#      schema:
#        type: integer
#        default: 0
#      description: From which index to seek for registries.
#    QuerySort:
#      name: sort
#      in: query
#      schema:
#        type: string
#        example: name
#        default: id
#      description: Named field to sort results by
  schemas:
    AddressRequestBody:
      required:
        - street
        - number
        - zipcode
        - city
      type: object
      properties:
        street:
          type: string
          minLength: 1
          maxLength: 200
          example: "Street name test"
        number:
          type: integer
          example: 1234
        zipcode:
          type: string
          minLength: 1
          maxLength: 15
          example: "12090000"
        city:
          type: string
          minLength: 1
          example: "New York"
    AddressCreatedResponseBody:
      type: object
      properties:
        id:
          type: string
          example: 620eb80e0f9f7c26ba190dfc
    AddressReadResponseBody:
      type: object
      properties:
        addresses:
          description: List of Addresses
          type: array
          items:
            $ref: '#/components/schemas/AddressItemsResponseBody'
    AddressItemsResponseBody:
      type: object
      properties:
        street:
          type: string
          example: Street name sample
        number:
          type: integer
          example: 1234
        zipcode:
          type: string
          example: 12090000
        city:
          type: string
          example: New York
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
        updatedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
        deletedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
    PhoneRequestBody:
      required:
        - phoneNumber
        - phoneType
      type: object
      properties:
        phoneNumber:
          type: string
          minLength: 1
          maxLength: 15
          example: "+55121234567890"
        phoneType:
          type: string
          example: "mobile"
          enum: ["mobile", "home", "office"]
    PhoneCreatedResponseBody:
      type: object
      properties:
        id:
          type: string
          example: 620eb80e0f9f7c26ba190dfc
    PhoneReadResponseBody:
      type: object
      properties:
        phones:
          description: List of Phones
          type: array
          items:
            $ref: '#/components/schemas/PhonesItemsResponseBody'
    PhonesItemsResponseBody:
      type: object
      properties:
        phoneNumber:
          type: string
          example: "+5512990990900"
        phoneType:
          type: string
          example: "mobile"
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
        updatedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
        deletedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
  responses:
    AddressCreatedResponse:
      description: Address Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressCreatedResponseBody'
    AddressReadResponse:
      description: Address List
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressReadResponseBody'
    PhoneCreatedResponse:
      description: Phone Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PhoneCreatedResponseBody'
    PhoneReadResponse:
      description: Phone List
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PhoneReadResponseBody'