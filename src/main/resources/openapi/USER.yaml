openapi: 3.0.2
info:
  title: USER
  description: Example OpenAPI document for User
  contact:
    name: WebFlux Sample
    email: webflux.sample@email.com
  version: 1.0.0
servers:
  - url: https://api-dev.webflux.sample/webflux-sample/v1
    description: DEVELOPMENT
  - url: https://api-qa.webflux.sample/webflux-sample/v1
    description: QA
  - url: https://api-homolog.webflux.sample/webflux-sample/v1
    description: HOMOLOG
  - url: https://api.webflux.sample/webflux-sample/v1
    description: PRODUCTION

tags:
  - name: User

paths:
  # Create, Read All Users
  /user:
    post:
      tags:
        - User
      summary: Create one user
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Create user

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
        - `AUTH-BASIC` level

      operationId: createUser
      requestBody:
        description: User to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBody'
        required: true
      responses:
        201:
          $ref: '#/components/responses/UserCreatedResponse'
      x-codegen-request-body-name: createUserRequestBody
    get:
      tags:
        - User
      summary: Read all users
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Retrieves a list of Users

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
           * `AUTH-BASIC` level

      operationId: readAllUsers
#      parameters:
#        - $ref: '#/components/parameters/QueryLimit'
#        - $ref: '#/components/parameters/QueryOffset'
#        - $ref: '#/components/parameters/QuerySort'
      responses:
        200:
          $ref: '#/components/responses/UsersReadResponse'
      x-codegen-request-body-name: readUsersRequestBody
  # Read, Update, Delete, Patch One User
  /user/{userId}:
    get:
      tags:
        - User
      summary: Read one user
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Retrieves a list of Users

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
           * `AUTH-BASIC` level

      operationId: readOneUser
      parameters:
        - in: path
          name: userId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserReadResponse'
      x-codegen-request-body-name: readUserRequestBody
    put:
      tags:
        - User
      summary: Update one user
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Update one specific user

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
           * `AUTH-BASIC` level

      operationId: updateUser
      parameters:
        - in: path
          name: userId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      requestBody:
        description: User Data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBody'
      responses:
        202:
          $ref: '#/components/responses/UserReadResponse'
      x-codegen-request-body-name: updateUserRequestBody
    delete:
      tags:
        - User
      summary: Delete one user
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Delete one specific user

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
           * `AUTH-BASIC` level

      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      responses:
        204:
          $ref: '#/components/responses/GenericsResponse'
      x-codegen-request-body-name: deleteUserRequestBody
    patch:
      tags:
        - User
      summary: Patch one user
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Patch one specific detail in one specific user

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
           * `AUTH-BASIC` level

      operationId: patchUser
      parameters:
        - in: path
          name: userId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      requestBody:
        description: User Data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchRequestBody'
      responses:
        202:
          $ref: '#/components/responses/GenericsResponse'
      x-codegen-request-body-name: patchUserRequestBody
  # Read One User - Me
  /user/me:
    get:
      tags:
        - User
      summary: Read one user
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Retrieves a list of Users

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
           * `AUTH-BASIC` level

      operationId: readOneUserMe
      parameters:
        - in: path
          name: userId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/UserReadResponse'
      x-codegen-request-body-name: readUserRequestBody
  # Patch One User using Path Parameters
  /user/{userId}/{fieldName}/{fieldValue}:
    patch:
      tags:
        - User
      summary: Patch one user using path parameters
      security:
        - BearerAuth: []
        - OauthSecurityUser:
            - write
            - read
      description: |
        
        ## Responsibilities
        Patch one specific detail in one specific user using only path parameters

        ---
        ## Requirements
        To access this endpoint, you must have one of the following sets of roles:
           * `AUTH-BASIC` level

      operationId: patchUserByPath
      parameters:
        - in: path
          name: userId
          required: true
          example: "67fe6bac382b9445e80b404e"
          schema:
            type: string
        - in: path
          name: fieldName
          required: true
          example: "name"
          schema:
            type: string
        - in: path
          name: fieldValue
          required: true
          example: "my%20name%20is%20John%20Smith%20Viz"
          schema:
            type: object
      responses:
        202:
          $ref: '#/components/responses/GenericsResponse'
      x-codegen-request-body-name: patchUserByPathRequestBody

components:
  securitySchemes:
    OauthSecurityUser:
      type: oauth2
      flows:
        password:
          tokenUrl: https://api-dev.webflux.sample/security/v1/oauth2/login
          scopes:
            read: User read scope
            write: User write scope
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
#  parameters:
#    QueryLimit:
#      name: limit
#      in: query
#      schema:
#        type: integer
#        default: 20
#      description: Total count of registries to fetch.
#    QueryOffset:
#      name: offset
#      in: query
#      schema:
#        type: integer
#        default: 0
#      description: From which index to seek for registries.
#    QuerySort:
#      name: sort
#      in: query
#      schema:
#        type: string
#        example: name
#        default: id
#      description: Named field to sort results by
  schemas:
    ## Create, Update
    UserRequestBody:
      required:
        - name
        - email
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
          example: John Smith Viz
        email:
          type: string
          minLength: 1
          maxLength: 200
          example: john-smith@email.com
    ## Patch
    UserPatchRequestBody:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
          example: John Smith Viz
        email:
          type: string
          minLength: 1
          maxLength: 200
          example: john-smith@email.com
    ## Create Response
    UserCreatedResponseBody:
      type: object
      properties:
        id:
          type: string
          example: 620eb80e0f9f7c26ba190dfc
    ## Read Response
    UserReadResponseBody:
      type: object
      properties:
        id:
          type: string
          example: 620eb80e0f9f7c26ba190dfc
        name:
          type: string
          example: John Smith Viz
        email:
          type: string
          example: john@email.com
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
        updatedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
        deletedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
        address:
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
          type: array
          items:
            $ref: '#/components/schemas/AddressResponseBody'
        phones:
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
          type: array
          items:
            $ref: '#/components/schemas/PhoneResponseBody'
    ## Read Only One Response
    UserOnlyReadResponseBody:
      type: object
      properties:
        id:
          type: string
          example: 620eb80e0f9f7c26ba190dfc
        name:
          type: string
          example: John Smith Viz
        email:
          type: string
          example: john@email.com
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
        updatedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
        deletedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
    UsersReadResponseBody:
      type: object
      properties:
        users:
          description: List of Users
          type: array
          items:
            $ref: '#/components/schemas/UserOnlyReadResponseBody'
    AddressResponseBody:
      type: object
      description: List of Address
      properties:
        street:
          type: string
          minLength: 1
          maxLength: 200
          example: "Street name test"
        number:
          type: integer
          example: 1234
        zipcode:
          type: string
          minLength: 1
          maxLength: 15
          example: "12090000"
        city:
          type: string
          minLength: 1
          example: "New York"
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
        updatedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
        deletedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
    PhoneResponseBody:
      type: object
      description: List of Phones
      properties:
        phoneNumber:
          type: string
          minLength: 1
          maxLength: 15
          example: "+55121234567890"
        phoneType:
          type: string
          minLength: 1
          example: "mobile"
        active:
          type: boolean
          example: true
        createdAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
        updatedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
        deletedAt:
          type: string
          example: "2025-04-20T21:18:23.524+00:00"
          x-field-extra-annotation: "@JsonInclude(JsonInclude.Include.NON_NULL)"
    ## Generics Response
    GenericsResponseBody:
      type: object
      properties:
        message:
          type: string
          example: "Operation executed successfully"
  responses:
    UserCreatedResponse:
      description: User Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserCreatedResponseBody'
    UserReadResponse:
      description: User Read
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserReadResponseBody'
    UsersReadResponse:
      description: User Read
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersReadResponseBody'
    GenericsResponse:
      description: Generics Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericsResponseBody'
